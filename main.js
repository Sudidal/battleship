(()=>{"use strict";const t=class{#t;#e;#s;#i;#a;#o=!1;#l=!1;#n=!1;constructor(t,e,s){this.#t=s,this.#e=[t,e]}getPos(){return this.#e}get getGameBoard(){return this.#t}get isAttacked(){return this.#o}get isSafe(){return this.#l}get isHaveShip(){return this.#n}get getShip(){return this.#s}get getDOMElement(){return this.#a}attack(t=!1){(t||this.#t.isClickable())&&(this.#o||this.#l?t&&(this.#o?console.error("bot trying to attack already attacked block"):this.#l&&console.error(`bot trying to attack a safe block: (${this.#e[0]}, ${this.#e[1]})`)):(this.#o=!0,this.#n&&this.#s.sink(),this.#t.hasBeenAttacked(this),this.callDOMUpdateCallback()))}markSafe(){this.#o||this.#l||(this.#l=!0,this.callDOMUpdateCallback())}placeShip(t){this.#n||(this.#s=t,this.#n=!0,this.#t.addShip(),this.callDOMUpdateCallback())}fleetHasSank(){this.callDOMUpdateCallback(),this.#t.fleetHasSank(this)}removeShip(){this.#s=null,this.#n=!1,this.#t.loseShip(),this.callDOMUpdateCallback()}setDOMInfo(t,e){this.#i=e,this.#a=t}callDOMUpdateCallback(){this.#i?this.#i():console.error("DOMUpdateCallback is not assigned")}},e=document.querySelector(".grid-container");function s(t,e,s=null){const i=new CustomEvent("blockrequest",{detail:{callback:e}});console.log(t),t.dispatchEvent(i)}const i=function(t,e,s,i){const a=e[0],o=e[1],l=Array();if(i){const e=t.getBlock(a+1,o);e&&l.push(e);const s=t.getBlock(a-1,o);s&&l.push(s);const i=t.getBlock(a,o-1);i&&l.push(i);const n=t.getBlock(a,o+1);n&&l.push(n)}if(s){const e=t.getBlock(a+1,o-1);e&&l.push(e);const s=t.getBlock(a-1,o-1);s&&l.push(s);const i=t.getBlock(a+1,o+1);i&&l.push(i);const n=t.getBlock(a-1,o+1);n&&l.push(n)}return l};class a{constructor(e,s,i,a=10){this.dimensions=a,this.length=this.dimensions*this.dimensions,this.blocks=Array(this.length),this.hitCallback=null,this.DOMCallback=null,this.shipsCount=0,this.destroyedShipsCount=0,this.cleared=!1,this.clickable=e,this.shipsHidden=s,this.active=!1,this.editable=i,function(e,s){let i=0;for(let a=0;a<e;a++)for(let o=0;o<e;o++){const e=new t(o,a,s);s.getArray()[i]=e,i++}console.log("initialized Grid")}(this.dimensions,this)}isClickable=()=>this.clickable;isShipsHidden=()=>this.shipsHidden;isFinished=()=>this.cleared;isActive=()=>this.active;isEditable=()=>this.editable;getArray=()=>this.blocks;getDimensions=()=>this.dimensions;getLength=()=>this.blocks.filter((()=>!0)).length;getBlock(t,e){return this.blocks.find((s=>s&&s.getPos()[0]===t&&s.getPos()[1]===e))}ready(){(function(t){const s=t.getArray(),i=document.createElement("div");i.className="board",e.append(i),t.setDOMCallback((()=>{!function(t,e){e.removeAttribute("class"),e.classList.add("board"),t.isActive()?e.classList.add("active-board"):e.classList.add("inactive-board")}(t,i)})),s.forEach((t=>{const e=document.createElement("div"),s=document.createElement("div");s.classList.add("sign"),e.append(s),i.append(e),t.setDOMInfo(e,(()=>{!function(t,e){t.removeAttribute("class"),t.classList.add("block"),e.isHaveShip?e.getShip.isSank?e.getShip.isFleetSank?t.classList.add("fleet-sank-block"):t.classList.add("sank-ship-block"):e.getGameBoard.isShipsHidden()||(t.classList.add("ship-block"),e.getGameBoard.isEditable()&&(t.classList.add("custom-draggable"),t.classList.add("coward"))):e.isAttacked?t.classList.add("attacked-block"):e.isSafe&&t.classList.add("safe-block")}(e,t)})),e.addEventListener("click",(()=>{t.attack()})),e.addEventListener("blockrequest",(e=>{e.detail.callback(t)}))})),console.log("Created grid UI")})(this),o(this),this.callDOMCallback()}setBoardState(t,e,s,i){let a=!1,l=!1;this.clickable!==t&&(this.clickable=t),this.shipsHidden!==e&&(this.shipsHidden=e,l=!0),this.editable!==i&&(this.editable=i,a=!0,l=!0),this.active!==s&&(this.active=s,a=!0),a&&(console.log("Updating grid UI"),this.callDOMCallback()),l&&o(this)}hasBeenAttacked(t){t.isHaveShip&&(this.loseShip(),l(this,t.getPos()));const e=t.isHaveShip?"ship":"";this.callHitCallback(e)}fleetHasSank(t){l(this,t.getPos())}addShip=()=>this.shipsCount++;loseShip(){this.destroyedShipsCount++,this.destroyedShipsCount>=this.shipsCount&&(this.cleared=!0)}setHitCallback(t){this.hitCallback||(this.hitCallback=t)}setDOMCallback(t){this.DOMCallback=t}callDOMCallback(){this.DOMCallback?this.DOMCallback():console.error("DOMCallback is not assigned")}callHitCallback(t){this.hitCallback&&this.hitCallback(t)}}function o(t){console.log("Updating all blocks UI"),t.getArray().forEach((t=>{t.callDOMUpdateCallback()}))}function l(t,e){e[0],e[1],i(t,e,!0,!1).forEach((t=>{if(t.isHaveShip)throw new Error(`Cross safe block has a ship! (${t.getPos()[0]}, ${t.getPos()[1]})`);t.markSafe()})),t.getBlock(e[0],e[1]).getShip.isFleetSank&&i(t,e,!1,!0).forEach((t=>{t.markSafe()}))}const n=class{#c=!1;#r=!1;constructor(t,e,s){this.myBlock=e.getBlock(t[0],t[1]),this.myBlock.placeShip(this),this.fleet=s}get isSank(){return this.#c}get isFleetSank(){return this.#r}get getFleet(){return this.fleet}get block(){return this.myBlock}sink(){this.#c=!0,this.fleet.loseShip()}fleetHasSank(){this.#r=!0,this.myBlock.fleetHasSank()}},c=class{#h;#d;#g;#p=0;constructor(t,e,s){this.#g=t,this.#d=Array(this.#g),this.#h=s,this.board=e}getShips=()=>this.#d;getDirection=()=>this.#h;initialize(t){this.occupyBlocks(t)}calculateBlocksToTake(t){let e=Array(),s=t[0],i=t[1];this.#h?s-=Math.floor(this.#g/2):i-=Math.floor(this.#g/2);for(let t=0;t<this.#g;t++)e.push([s,i]),this.#h?s++:i++;return e}loseShip(){this.#p++,this.#p>=this.#g&&this.#d.forEach((t=>{t.fleetHasSank()}))}occupyBlocks(t){this.#d.filter((()=>!0)).length>0&&this.retreat();const e=this.calculateBlocksToTake(t);for(let t=0;t<this.#g;t++){const s=new n(e[t],this.board,this);this.#d[t]=s}}retreat(){for(let t=0;t<this.#d.length;t++)this.#d[t].block.removeShip(),this.#d[t]=null}},r=function(t,e,s,a=null){const o=s[0],l=s[1];let n=!0;if(t.getBlock(o,l).isHaveShip&&a&&t.getBlock(o,l).getShip.fleet!==a.getShip.fleet)return n=!1,n;const c=e.calculateBlocksToTake([o,l]);return c.length>0?c.forEach((s=>{t.getBlock(s[0],s[1])?i(t,s,!0,!0).forEach((t=>{t.isHaveShip&&t.getShip.getFleet!==e&&(n=!1)})):(console.log("out of bounds"),n=!1)})):(console.log("no blocks to take"),n=!1),n};function h(t,e,s=null){if(s){if(s.length<1)return null}else{s=Array(t.getLength());for(let t=0;t<s.length;t++)s[t]=t}const i=Math.floor(Math.random()*(s.length-1)),a=t.getArray()[i];let o;return a&&(o=a.getPos()),r(t,e,o)?o:(s.splice(i,1),h(t,e,s))}const d=[1,1,1,1,2,2,2,3,3,4];function g(t,e,s){let i=null,a=0;for(;!i;)a++,i=p(t,e,s);return console.log("Tried "+a+" times to make a good alignment"),i}function p(t,e,s){const i=new a(t,e,s);for(let t=0;t<d.length;t++){const e=1===Math.floor(2*Math.random()),s=new c(d[t],i,e),a=h(i,s);if(!a)return null;s.initialize(a)}return i}function k(t,e,s=[]){let a=Array(),o=Array();if(i(t,e,!1,!0).forEach((t=>{if(t.isAttacked||t.isSafe){if(t.isHaveShip){let e=!1;if(s.length>0)for(let i=0;i<s.length;i++)s[i]===t&&(e=!0);e||o.push(t)}}else t.isAttacked||t.isSafe||a.push(t)})),a.length>0){const t=Math.floor(Math.random()*(a.length-1));return a[t]}if(o.length>0){const e=Math.floor(Math.random()*(o.length-1)),i=o[e];return console.log("jumped to "+i.getPos()),s.push(i),k(t,i.getPos(),s)}return(s=[]).push(t.getBlock(e[0],e[1])),k(t,e,s)}let f,u,b;function S(){console.log("it's player's turn"),f.setBoardState(!1,!1,!1,!1),u.setBoardState(!0,!0,!0,!1)}function m(){console.log("it's bot's turn"),f.setBoardState(!1,!1,!0,!1),u.setBoardState(!1,!0,!1,!1),b.play()}function y(t){f.setBoardState(!1,!1,!1,!1),u.setBoardState(!1,!1,!1,!1),function(t){v.addEventListener("click",(()=>{window.location.reload()})),v.style.visibility="visible",B.style.fontWeight="bold","player"===t?(B.textContent="You Won!",B.style.color="green"):"bot"===t&&(B.textContent="You Lose",B.style.color="red")}(t)}const v=document.querySelector(".start-btn"),B=document.querySelector(".message");v.addEventListener("click",(()=>{S(),B.textContent="Find enemy's fleets and destroy them",v.style.visibility="hidden"})),B.textContent="drag and drop red blocks to create your alignment, then press start";const M=class{#k=[];constructor(){}add(t){this.#k.push(t)}remove(t){for(let e=0;e<this.#k.length;e++)this.#k[e]===t&&this.#k.splice(e,1)}trigger(t){this.#k.forEach((e=>{e(t)}))}},C=new M,E=new M,A=new M;document.body.addEventListener("mousemove",(t=>{C.trigger(t)})),document.body.addEventListener("mouseup",(t=>{E.trigger(t)})),document.body.addEventListener("mousedown",(t=>{A.trigger(t)}));const w="custom-droppable";let D=null,L=null,O=null,H=!0;function U(t,e,s,i){if(H)P(e,s,i);else{if(!O)throw new Error("no move callback specified");O(t,e,s,i)}}function F(t){console.log("started dragging");const e=t.target;let s=e;e.classList.contains("coward")&&(s=e.cloneNode(!0),e.append(s),s.classList.add("drag-clone")),console.log(`${t.offsetX} ${t.offsetY}`);let i=t.offsetX,a=t.offsetY,o=!0;function l(t){console.log("being dragged"),U(t,s,t.pageX-i,t.pageY-a)}E.add((function t(s){o&&(console.log("not being dragged anymore"),o=!1,C.remove(l),E.remove(t),function(t,e){if(H)!function(t,e){e.style.position="static",e.style.pointerEvents="auto",console.log(t.target),t.target&&t.target.classList.contains(w)&&t.target.append(e),e!=e&&e.remove()}(t,e);else{if(!L)throw new Error("no drop callback specified");L(t,e)}}(s,e))})),C.add(l),s.style.pointerEvents="none",console.log("setting document body height to 100vh, remove it or edit it if you want"),document.body.style.height="100vh",U(t,s,t.pageX-i,t.pageY-a)}function P(t,e,s){console.log(e),console.log(s),t.style.position="absolute",t.style.top=`${s}px`,t.style.left=`${e}px`}A.add((function(t){if(t.target.classList.contains("custom-draggable"))if(console.log(H),H)F(t);else{if(!D)throw new Error("no drag callback specified");D(t)}}));let x=null,T=null;var Y;function z(t,e,s,i){console.log("moving");let a=!1;if(t&&t.getGameBoard===T.getGameBoard){const e=t.getPos();a=r(T.getGameBoard,T.getShip.getFleet,e,T)}e.className=a?"valid-floaty-ship":"invalid-floaty-ship",console.log("did the job"),P(e,s,i)}function X(t,e,s,i){const a=i.getShip.getFleet;if(s){const t=s.getPos();r(i.getGameBoard,a,t)&&a.initialize(t)}e.remove(),i=null}H=!1,Y=function(t){x=t,s(t.target,(e=>{!function(t,e){T=t;const s=t.getShip.getFleet,i=s.getDirection(),a=s.getShips(),o=document.createElement("div");x.target.parentElement.append(o),a.forEach((t=>{const e=t.block.getDOMElement.cloneNode(!0);e.className="floaty-block",o.append(e)})),console.log("clone");let l=getComputedStyle(o).width,n=getComputedStyle(o).height,c="";if(i){const t=l;l=n,n=t,c="row"}else c="column";o.style.display="flex",o.style.position="absolute",o.style.pointerEvents="none",o.style.flexDirection=`${c}`,o.style.width=l,o.style.height=n;const r={target:o,pageX:x.pageX,pageY:x.pageY,offsetX:parseFloat(l)/2,offsetY:parseFloat(n)/2};F(r),z(T,o,r.pageX-r.offsetX,r.pageY-r.offsetY)}(e,t.target)}))},D||(D=Y),O||(O=function(t,e,i,a){t.target.classList.contains("block")?s(t.target,(t=>{z(t,e,i,a)})):z(null,e,i,a)}),L||(L=function(t,e){x=null;const i=t.target;i.classList.contains("block")?s(i,(t=>{X(0,e,t,T)})):X(0,e,null,T)}),document.body.addEventListener("dragstart",(t=>{t.preventDefault()})),f=g(!1,!1,!0),u=g(!1,!0,!1),b=new class{#f=3e3;#u=250;#b;#S;#m=null;#y=null;attackedAShip=!1;constructor(t,e){this.#b=e,this.#S=t,this.length=t.getLength(),this.availableBlocks=Array(this.length);for(let t=0;t<this.length;t++)this.availableBlocks[t]=t}play(){const t=(e=this.#f,s=this.#u,Math.floor(Math.random()*(s-e)+e));var e,s,i;console.log(t),(i=t,new Promise((t=>setTimeout(t,i)))).then((()=>{const t=function(t,e){if(function(t,e){for(let s=0;s<t.length;s++){const i=t[s];(e[i].isSafe||e[i].isAttacked)&&t.splice(s,1)}}(e.getAvailableBlocks(),t.getArray()),e.getAvailableBlocks().length<1)throw new Error("Bot array is out of indexes before the game ends");let s,i=e.getLastAttacked(),a=e.getTargetBlock();return a?a.getShip.isFleetSank?(console.log("the fleet i targeted already sank, i'll forget it"),a=null):console.log("the fleet i targeted didn't sink yet"):i&&i.isHaveShip&&!i.getShip.isFleetSank&&(console.log("I started targeting a new fleet"),a=i),s=a?k(t,a.getPos()):function(t,e){let s;const i=Math.floor(Math.random()*(t.length-1));if(i>t.length-1||i<0)throw new Error("Index out of array bounds, Index: "+i+", Array: "+t);{const a=t[i];s=e.getArray()[a]}return s}(e.getAvailableBlocks(),t),s}(this.#b,this);if(!t)throw new Error("Bot failed to find a block");this.setLastAttacked(t),t.isHaveShip&&this.setTargetBlock(t),t.attack(!0)}))}getAvailableBlocks=()=>this.availableBlocks;getLastAttacked=()=>this.#m;getTargetBlock=()=>this.#y;setLastAttacked=t=>this.#m=t;setTargetBlock=t=>this.#y=t}(u,f),f.setHitCallback((t=>{f.isFinished()?y("bot"):"ship"===t?m():S()})),u.setHitCallback((t=>{u.isFinished()?y("player"):"ship"===t?S():m()})),f.ready(),u.ready()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,